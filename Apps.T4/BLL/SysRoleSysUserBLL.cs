


using System;
using System.Collections.Generic;
using Apps.IBLL;
using Apps.IDAL;
using Apps.Models;
using Apps.Models.Sys;
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间2018-10-23 11:20:12
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Apps.BLL
{    
    
    /// <summary>
    /// SysRoleSysUser 操作类
    /// </summary>
    public class SysRoleSysUserBLL: BaseBLL, ISysRoleSysUserBLL
    {

        

        public static SysRoleSysUser Select(String sysUserId, String sysRoleId)
        {
            using(var context = db.Context())
            {
                return context.Sql(" SELECT * FROM SysRoleSysUser WHERE SysUserId = @sysuserid AND SysRoleId = @sysroleid ")
                    .Parameter("sysuserid", sysUserId)
.Parameter("sysroleid", sysRoleId)

                    .QuerySingle<SysRoleSysUser>();
            }
        }

        public static List<SysRoleSysUser> SelectAll()
        {
            return SelectAll(string.Empty);
        }

        public static List<SysRoleSysUser> SelectAll(string sortExpression)
        {
            return SelectAll(0, 0, sortExpression);
        }

        public static List<SysRoleSysUser> SelectAll(int startRowIndex, int maximumRows, string sortExpression)
        {
            using (var context = db.Context())
            {
                var select = context.Select<SysRoleSysUser>(" * ")
                    .From(" SysRoleSysUser ");

                if (maximumRows > 0)
                {
                    if (startRowIndex == 0) 
                        startRowIndex = 1;

                    select.Paging(startRowIndex, maximumRows);
                }

                if (!string.IsNullOrEmpty(sortExpression))
                    select.OrderBy(sortExpression);

                return select.QueryMany();
            }
        }

        public static int CountAll()
        {
            using (var context = db.Context())
            {
                return context.Sql(" SELECT COUNT(*) FROM SysRoleSysUser ")
                    .QuerySingle<int>();
            }
        }

        

        public static List<SysRoleSysUser> SelectBySysRole(String sysRoleId)
        {
            return SelectBySysRole(sysRoleId, string.Empty);
        }

        public static List<SysRoleSysUser> SelectBySysRole(String sysRoleId, string sortExpression)
        {
            return SelectBySysRole(sysRoleId, 0, 0, sortExpression);
        }

        public static List<SysRoleSysUser> SelectBySysRole(String sysRoleId, int startRowIndex, int maximumRows, string sortExpression)
        {
            using (var context = db.Context())
            {
                var select = context.Select<SysRoleSysUser>(" * ")
                    .From(" SysRoleSysUser ")
                    .Where(" SysRoleId = @sysroleid ")
                    .Parameter("sysroleid", sysRoleId);

                if (maximumRows > 0)
                {
                    if (startRowIndex == 0) 
                        startRowIndex = 1;

                    select.Paging(startRowIndex, maximumRows);
                }

                if (!string.IsNullOrEmpty(sortExpression))
                    select.OrderBy(sortExpression);

                return select.QueryMany();
            }
        }

        public static int CountBySysRole(String sysRoleId)
        {
            using (var context = db.Context())
            {
                return context.Sql(" SELECT COUNT(*) FROM SysRoleSysUser WHERE SysRoleId = @sysroleid")
                    .Parameter("sysroleid", sysRoleId)
                    .QuerySingle<int>();
            }
        }
        

        public static List<SysRoleSysUser> SelectBySysUser(String sysUserId)
        {
            return SelectBySysUser(sysUserId, string.Empty);
        }

        public static List<SysRoleSysUser> SelectBySysUser(String sysUserId, string sortExpression)
        {
            return SelectBySysUser(sysUserId, 0, 0, sortExpression);
        }

        public static List<SysRoleSysUser> SelectBySysUser(String sysUserId, int startRowIndex, int maximumRows, string sortExpression)
        {
            using (var context = db.Context())
            {
                var select = context.Select<SysRoleSysUser>(" * ")
                    .From(" SysRoleSysUser ")
                    .Where(" SysUserId = @sysuserid ")
                    .Parameter("sysuserid", sysUserId);

                if (maximumRows > 0)
                {
                    if (startRowIndex == 0) 
                        startRowIndex = 1;

                    select.Paging(startRowIndex, maximumRows);
                }

                if (!string.IsNullOrEmpty(sortExpression))
                    select.OrderBy(sortExpression);

                return select.QueryMany();
            }
        }

        public static int CountBySysUser(String sysUserId)
        {
            using (var context = db.Context())
            {
                return context.Sql(" SELECT COUNT(*) FROM SysRoleSysUser WHERE SysUserId = @sysuserid")
                    .Parameter("sysuserid", sysUserId)
                    .QuerySingle<int>();
            }
        }
        


        public static bool Insert(SysRoleSysUser sysRoleSysUser) 
        {
            using (var context =db.Context())
            {
                return context.Insert<SysRoleSysUser>("SysRoleSysUser", sysRoleSysUser)
                    .Execute() > 0;
            }
        }

        public static bool Update(SysRoleSysUser sysRoleSysUser)
        {
            using (var context = db.Context())
            {
                return context.Update<SysRoleSysUser>("SysRoleSysUser", sysRoleSysUser)
                    .AutoMap(x => new { x.SysUserId, x.SysRoleId })
                    
                    .Where("SysUserId", sysRoleSysUser.SysUserId)
                    
                    .Where("SysRoleId", sysRoleSysUser.SysRoleId)
                    
                    .Execute() > 0;
            }
        }

        public static bool Delete(SysRoleSysUser sysRoleSysUser) 
        {
            return Delete(sysRoleSysUser.SysUserId, sysRoleSysUser.SysRoleId);
        }

        public static bool Delete(String sysUserId, String sysRoleId)
        {
            using (var context = db.Context())
            {
                return context.Sql(" DELETE FROM Product WHERE SysUserId = @sysuserid AND SysRoleId = @sysroleid ")
                    .Parameter("sysuserid", sysUserId)
.Parameter("sysroleid", sysRoleId)

                    .Execute() > 0;
            }
        }
    }
    
}
    
